// Package CivetDevicePluginCenter comment
// This file was generated by tars2go 1.1.4
// Generated from DeviceAuthProcess.tars
package CivetDevicePluginCenter

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// CompanyDeivceBind struct implement
type CompanyDeivceBind struct {
	ID            int32  `json:"ID"`
	CompanyID     int32  `json:"CompanyID"`
	DeivceClassID int32  `json:"DeivceClassID"`
	Summarise     string `json:"Summarise"`
	CreateTime    string `json:"CreateTime"`
	UpdateTime    string `json:"UpdateTime"`
	ExpireTime    int32  `json:"expireTime"`
}

func (st *CompanyDeivceBind) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *CompanyDeivceBind) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int32(&st.ID, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.CompanyID, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.DeivceClassID, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Summarise, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.CreateTime, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.UpdateTime, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.ExpireTime, 6, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CompanyDeivceBind) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CompanyDeivceBind, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CompanyDeivceBind) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int32(st.ID, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.CompanyID, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.DeivceClassID, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Summarise, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.CreateTime, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.UpdateTime, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.ExpireTime, 6)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CompanyDeivceBind) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// CompanyProductBind struct implement
type CompanyProductBind struct {
	ID         int32  `json:"ID"`
	CompanyID  int32  `json:"CompanyID"`
	ProductID  int32  `json:"ProductID"`
	Summarise  string `json:"Summarise"`
	CreateTime string `json:"CreateTime"`
	UpdateTime string `json:"UpdateTime"`
	SoftDelete bool   `json:"SoftDelete"`
}

func (st *CompanyProductBind) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *CompanyProductBind) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int32(&st.ID, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.CompanyID, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.ProductID, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Summarise, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.CreateTime, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.UpdateTime, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_bool(&st.SoftDelete, 6, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CompanyProductBind) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CompanyProductBind, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CompanyProductBind) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int32(st.ID, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.CompanyID, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.ProductID, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Summarise, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.CreateTime, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.UpdateTime, 5)
	if err != nil {
		return err
	}

	err = _os.Write_bool(st.SoftDelete, 6)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CompanyProductBind) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
