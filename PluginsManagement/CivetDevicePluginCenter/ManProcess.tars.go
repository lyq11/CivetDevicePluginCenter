// Package CivetDevicePluginCenter comment
// This file was generated by tars2go 1.1.4
// Generated from ManProcess.tars
package CivetDevicePluginCenter

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/basef"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/protocol/tup"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
	"unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8
var _ = unsafe.Pointer(nil)
var _ = bytes.ErrTooLarge

//ManProcess struct
type ManProcess struct {
	s m.Servant
}

//CreatePlugin is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) CreatePlugin(plugin *Plugin, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = plugin.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "CreatePlugin", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreatePluginWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) CreatePluginWithContext(tarsCtx context.Context, plugin *Plugin, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = plugin.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "CreatePlugin", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreatePluginOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) CreatePluginOneWayWithContext(tarsCtx context.Context, plugin *Plugin, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = plugin.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "CreatePlugin", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeletePlugin is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) DeletePlugin(pluginID int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(pluginID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "DeletePlugin", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeletePluginWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) DeletePluginWithContext(tarsCtx context.Context, pluginID int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(pluginID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "DeletePlugin", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeletePluginOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) DeletePluginOneWayWithContext(tarsCtx context.Context, pluginID int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(pluginID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "DeletePlugin", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//EditPlugin is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) EditPlugin(plugin *Plugin, searchKey string, searchValue string, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = plugin.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(searchKey, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(searchValue, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "EditPlugin", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 4, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//EditPluginWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) EditPluginWithContext(tarsCtx context.Context, plugin *Plugin, searchKey string, searchValue string, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = plugin.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(searchKey, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(searchValue, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "EditPlugin", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 4, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//EditPluginOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) EditPluginOneWayWithContext(tarsCtx context.Context, plugin *Plugin, searchKey string, searchValue string, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = plugin.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(searchKey, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(searchValue, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "EditPlugin", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryPlugins is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryPlugins(offset int32, limit int32, Pluginlist *[]Plugin, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Pluginlist))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Pluginlist {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryPlugins", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Pluginlist) = make([]Plugin, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = (*Pluginlist)[i0].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryPluginsWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryPluginsWithContext(tarsCtx context.Context, offset int32, limit int32, Pluginlist *[]Plugin, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Pluginlist))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Pluginlist {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryPlugins", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Pluginlist) = make([]Plugin, length)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {

			err = (*Pluginlist)[i1].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryPluginsOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryPluginsOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, Pluginlist *[]Plugin, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Pluginlist))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Pluginlist {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "QueryPlugins", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//Bind is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) Bind(relation *PluginBind, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = relation.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "Bind", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//BindWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) BindWithContext(tarsCtx context.Context, relation *PluginBind, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = relation.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "Bind", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//BindOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) BindOneWayWithContext(tarsCtx context.Context, relation *PluginBind, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = relation.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "Bind", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UnBindWithID is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) UnBindWithID(relation *PluginBind, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = relation.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "UnBindWithID", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UnBindWithIDWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) UnBindWithIDWithContext(tarsCtx context.Context, relation *PluginBind, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = relation.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "UnBindWithID", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UnBindWithIDOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) UnBindWithIDOneWayWithContext(tarsCtx context.Context, relation *PluginBind, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = relation.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "UnBindWithID", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindAll is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryBindAll(offset int32, limit int32, result *[]PluginBind, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*result))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *result {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindAll", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*result) = make([]PluginBind, length)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {

			err = (*result)[i2].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindAllWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryBindAllWithContext(tarsCtx context.Context, offset int32, limit int32, result *[]PluginBind, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*result))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *result {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindAll", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*result) = make([]PluginBind, length)
		for i3, e3 := int32(0), length; i3 < e3; i3++ {

			err = (*result)[i3].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindAllOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryBindAllOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, result *[]PluginBind, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*result))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *result {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "QueryBindAll", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindWithProduct is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryBindWithProduct(offset int32, limit int32, ProductID string, result *[]PluginBind, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ProductID, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*result))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *result {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindWithProduct", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*result) = make([]PluginBind, length)
		for i4, e4 := int32(0), length; i4 < e4; i4++ {

			err = (*result)[i4].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 5, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 6, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindWithProductWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryBindWithProductWithContext(tarsCtx context.Context, offset int32, limit int32, ProductID string, result *[]PluginBind, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ProductID, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*result))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *result {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindWithProduct", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*result) = make([]PluginBind, length)
		for i5, e5 := int32(0), length; i5 < e5; i5++ {

			err = (*result)[i5].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 5, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 6, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindWithProductOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryBindWithProductOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, ProductID string, result *[]PluginBind, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ProductID, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*result))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *result {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "QueryBindWithProduct", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindWithProductKey is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryBindWithProductKey(offset int32, limit int32, ProductID int32, result *[]PluginBind, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(ProductID, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*result))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *result {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindWithProductKey", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*result) = make([]PluginBind, length)
		for i6, e6 := int32(0), length; i6 < e6; i6++ {

			err = (*result)[i6].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 5, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 6, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindWithProductKeyWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryBindWithProductKeyWithContext(tarsCtx context.Context, offset int32, limit int32, ProductID int32, result *[]PluginBind, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(ProductID, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*result))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *result {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindWithProductKey", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*result) = make([]PluginBind, length)
		for i7, e7 := int32(0), length; i7 < e7; i7++ {

			err = (*result)[i7].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 5, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 6, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindWithProductKeyOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryBindWithProductKeyOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, ProductID int32, result *[]PluginBind, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(ProductID, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*result))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *result {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "QueryBindWithProductKey", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindWithPluginID is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryBindWithPluginID(offset int32, limit int32, PluginID int32, result *[]PluginBind, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(PluginID, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*result))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *result {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindWithPluginID", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*result) = make([]PluginBind, length)
		for i8, e8 := int32(0), length; i8 < e8; i8++ {

			err = (*result)[i8].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 5, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 6, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindWithPluginIDWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryBindWithPluginIDWithContext(tarsCtx context.Context, offset int32, limit int32, PluginID int32, result *[]PluginBind, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(PluginID, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*result))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *result {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindWithPluginID", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*result) = make([]PluginBind, length)
		for i9, e9 := int32(0), length; i9 < e9; i9++ {

			err = (*result)[i9].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 5, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*res), 6, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindWithPluginIDOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ManProcess) QueryBindWithPluginIDOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, PluginID int32, result *[]PluginBind, count *int32, res *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(PluginID, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*result))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *result {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*res), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "QueryBindWithPluginID", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetServant sets servant for the service.
func (_obj *ManProcess) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *ManProcess) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol sets the protocol for the servant.
func (_obj *ManProcess) TarsSetProtocol(p m.Protocol) {
	_obj.s.TarsSetProtocol(p)
}

//AddServant adds servant  for the service.
func (_obj *ManProcess) AddServant(imp _impManProcess, obj string) {
	tars.AddServant(_obj, imp, obj)
}

//AddServant adds servant  for the service with context.
func (_obj *ManProcess) AddServantWithContext(imp _impManProcessWithContext, obj string) {
	tars.AddServantWithContext(_obj, imp, obj)
}

type _impManProcess interface {
	CreatePlugin(plugin *Plugin, res *int32) (ret int32, err error)
	DeletePlugin(pluginID int32, res *int32) (ret int32, err error)
	EditPlugin(plugin *Plugin, searchKey string, searchValue string, res *int32) (ret int32, err error)
	QueryPlugins(offset int32, limit int32, Pluginlist *[]Plugin, count *int32, res *int32) (ret int32, err error)
	Bind(relation *PluginBind, res *int32) (ret int32, err error)
	UnBindWithID(relation *PluginBind, res *int32) (ret int32, err error)
	QueryBindAll(offset int32, limit int32, result *[]PluginBind, count *int32, res *int32) (ret int32, err error)
	QueryBindWithProduct(offset int32, limit int32, ProductID string, result *[]PluginBind, count *int32, res *int32) (ret int32, err error)
	QueryBindWithProductKey(offset int32, limit int32, ProductID int32, result *[]PluginBind, count *int32, res *int32) (ret int32, err error)
	QueryBindWithPluginID(offset int32, limit int32, PluginID int32, result *[]PluginBind, count *int32, res *int32) (ret int32, err error)
}
type _impManProcessWithContext interface {
	CreatePlugin(tarsCtx context.Context, plugin *Plugin, res *int32) (ret int32, err error)
	DeletePlugin(tarsCtx context.Context, pluginID int32, res *int32) (ret int32, err error)
	EditPlugin(tarsCtx context.Context, plugin *Plugin, searchKey string, searchValue string, res *int32) (ret int32, err error)
	QueryPlugins(tarsCtx context.Context, offset int32, limit int32, Pluginlist *[]Plugin, count *int32, res *int32) (ret int32, err error)
	Bind(tarsCtx context.Context, relation *PluginBind, res *int32) (ret int32, err error)
	UnBindWithID(tarsCtx context.Context, relation *PluginBind, res *int32) (ret int32, err error)
	QueryBindAll(tarsCtx context.Context, offset int32, limit int32, result *[]PluginBind, count *int32, res *int32) (ret int32, err error)
	QueryBindWithProduct(tarsCtx context.Context, offset int32, limit int32, ProductID string, result *[]PluginBind, count *int32, res *int32) (ret int32, err error)
	QueryBindWithProductKey(tarsCtx context.Context, offset int32, limit int32, ProductID int32, result *[]PluginBind, count *int32, res *int32) (ret int32, err error)
	QueryBindWithPluginID(tarsCtx context.Context, offset int32, limit int32, PluginID int32, result *[]PluginBind, count *int32, res *int32) (ret int32, err error)
}

// Dispatch is used to call the server side implemnet for the method defined in the tars file. _withContext shows using context or not.
func (_obj *ManProcess) Dispatch(tarsCtx context.Context, _val interface{}, tarsReq *requestf.RequestPacket, tarsResp *requestf.ResponsePacket, _withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(tools.Int8ToByte(tarsReq.SBuffer))
	_os := codec.NewBuffer()
	switch tarsReq.SFuncName {
	case "CreatePlugin":
		var plugin Plugin
		var res int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = plugin.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("plugin", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = plugin.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["plugin"])
				plugin.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &plugin); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impManProcess)
			_funRet_, err = _imp.CreatePlugin(&plugin, &res)
		} else {
			_imp := _val.(_impManProcessWithContext)
			_funRet_, err = _imp.CreatePlugin(tarsCtx, &plugin, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(res, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(res, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "DeletePlugin":
		var pluginID int32
		var res int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&pluginID, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("pluginID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&pluginID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["pluginID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &pluginID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impManProcess)
			_funRet_, err = _imp.DeletePlugin(pluginID, &res)
		} else {
			_imp := _val.(_impManProcessWithContext)
			_funRet_, err = _imp.DeletePlugin(tarsCtx, pluginID, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(res, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(res, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "EditPlugin":
		var plugin Plugin
		var searchKey string
		var searchValue string
		var res int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = plugin.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&searchKey, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&searchValue, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("plugin", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = plugin.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("searchKey", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&searchKey, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("searchValue", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&searchValue, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["plugin"])
				plugin.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &plugin); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["searchKey"])
				if err = json.Unmarshal([]byte(_jsonStr_), &searchKey); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["searchValue"])
				if err = json.Unmarshal([]byte(_jsonStr_), &searchValue); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impManProcess)
			_funRet_, err = _imp.EditPlugin(&plugin, searchKey, searchValue, &res)
		} else {
			_imp := _val.(_impManProcessWithContext)
			_funRet_, err = _imp.EditPlugin(tarsCtx, &plugin, searchKey, searchValue, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(res, 4)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(res, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "QueryPlugins":
		var offset int32
		var limit int32
		var Pluginlist []Plugin
		var count int32
		var res int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impManProcess)
			_funRet_, err = _imp.QueryPlugins(offset, limit, &Pluginlist, &count, &res)
		} else {
			_imp := _val.(_impManProcessWithContext)
			_funRet_, err = _imp.QueryPlugins(tarsCtx, offset, limit, &Pluginlist, &count, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 3)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Pluginlist)), 0)
			if err != nil {
				return err
			}

			for _, v := range Pluginlist {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(res, 5)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Pluginlist)), 0)
			if err != nil {
				return err
			}

			for _, v := range Pluginlist {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("Pluginlist", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(res, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Pluginlist"] = Pluginlist
			_rspJson_["count"] = count
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "Bind":
		var relation PluginBind
		var res int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = relation.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("relation", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = relation.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["relation"])
				relation.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &relation); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impManProcess)
			_funRet_, err = _imp.Bind(&relation, &res)
		} else {
			_imp := _val.(_impManProcessWithContext)
			_funRet_, err = _imp.Bind(tarsCtx, &relation, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(res, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(res, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "UnBindWithID":
		var relation PluginBind
		var res int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = relation.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("relation", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = relation.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["relation"])
				relation.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &relation); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impManProcess)
			_funRet_, err = _imp.UnBindWithID(&relation, &res)
		} else {
			_imp := _val.(_impManProcessWithContext)
			_funRet_, err = _imp.UnBindWithID(tarsCtx, &relation, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(res, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(res, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "QueryBindAll":
		var offset int32
		var limit int32
		var result []PluginBind
		var count int32
		var res int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impManProcess)
			_funRet_, err = _imp.QueryBindAll(offset, limit, &result, &count, &res)
		} else {
			_imp := _val.(_impManProcessWithContext)
			_funRet_, err = _imp.QueryBindAll(tarsCtx, offset, limit, &result, &count, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 3)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(result)), 0)
			if err != nil {
				return err
			}

			for _, v := range result {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(res, 5)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(result)), 0)
			if err != nil {
				return err
			}

			for _, v := range result {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(res, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result
			_rspJson_["count"] = count
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "QueryBindWithProduct":
		var offset int32
		var limit int32
		var ProductID string
		var result []PluginBind
		var count int32
		var res int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&ProductID, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("ProductID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&ProductID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["ProductID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &ProductID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impManProcess)
			_funRet_, err = _imp.QueryBindWithProduct(offset, limit, ProductID, &result, &count, &res)
		} else {
			_imp := _val.(_impManProcessWithContext)
			_funRet_, err = _imp.QueryBindWithProduct(tarsCtx, offset, limit, ProductID, &result, &count, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(result)), 0)
			if err != nil {
				return err
			}

			for _, v := range result {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 5)
			if err != nil {
				return err
			}

			err = _os.Write_int32(res, 6)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(result)), 0)
			if err != nil {
				return err
			}

			for _, v := range result {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(res, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result
			_rspJson_["count"] = count
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "QueryBindWithProductKey":
		var offset int32
		var limit int32
		var ProductID int32
		var result []PluginBind
		var count int32
		var res int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&ProductID, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("ProductID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&ProductID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["ProductID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &ProductID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impManProcess)
			_funRet_, err = _imp.QueryBindWithProductKey(offset, limit, ProductID, &result, &count, &res)
		} else {
			_imp := _val.(_impManProcessWithContext)
			_funRet_, err = _imp.QueryBindWithProductKey(tarsCtx, offset, limit, ProductID, &result, &count, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(result)), 0)
			if err != nil {
				return err
			}

			for _, v := range result {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 5)
			if err != nil {
				return err
			}

			err = _os.Write_int32(res, 6)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(result)), 0)
			if err != nil {
				return err
			}

			for _, v := range result {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(res, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result
			_rspJson_["count"] = count
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "QueryBindWithPluginID":
		var offset int32
		var limit int32
		var PluginID int32
		var result []PluginBind
		var count int32
		var res int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&PluginID, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("PluginID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&PluginID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["PluginID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &PluginID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impManProcess)
			_funRet_, err = _imp.QueryBindWithPluginID(offset, limit, PluginID, &result, &count, &res)
		} else {
			_imp := _val.(_impManProcessWithContext)
			_funRet_, err = _imp.QueryBindWithPluginID(tarsCtx, offset, limit, PluginID, &result, &count, &res)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(result)), 0)
			if err != nil {
				return err
			}

			for _, v := range result {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 5)
			if err != nil {
				return err
			}

			err = _os.Write_int32(res, 6)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(result)), 0)
			if err != nil {
				return err
			}

			for _, v := range result {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(res, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("res", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result
			_rspJson_["count"] = count
			_rspJson_["res"] = res

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(tarsCtx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(tarsCtx)
	if ok && c != nil {
		_context = c
	}
	*tarsResp = requestf.ResponsePacket{
		IVersion:     tarsReq.IVersion,
		CPacketType:  0,
		IRequestId:   tarsReq.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}

	_ = _is
	_ = _os
	_ = length
	_ = have
	_ = ty
	return nil
}
