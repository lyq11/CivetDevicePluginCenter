// Package CivetDevicePluginCenter comment
// This file was generated by tars2go 1.1.4
// Generated from PluginDeviceProcess.tars
package CivetDevicePluginCenter

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/basef"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/protocol/tup"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
	"unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8
var _ = unsafe.Pointer(nil)
var _ = bytes.ErrTooLarge

//PluginDeviceProcess struct
type PluginDeviceProcess struct {
	s m.Servant
}

//QueryDeviceWithCondition is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryDeviceWithCondition(deviceNameJson string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryDeviceWithCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryDeviceWithConditionWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryDeviceWithConditionWithContext(tarsCtx context.Context, deviceNameJson string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryDeviceWithCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryDeviceWithConditionOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryDeviceWithConditionOneWayWithContext(tarsCtx context.Context, deviceNameJson string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "QueryDeviceWithCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryDeviceCondition is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryDeviceCondition(deviceNameJson string, SearchKey string, SearchValue string, col *[]TarsWarpPacket, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*col))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryDeviceCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*col) = make([]TarsWarpPacket, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = (*col)[i0].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*Result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryDeviceConditionWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryDeviceConditionWithContext(tarsCtx context.Context, deviceNameJson string, SearchKey string, SearchValue string, col *[]TarsWarpPacket, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*col))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryDeviceCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*col) = make([]TarsWarpPacket, length)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {

			err = (*col)[i1].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*Result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryDeviceConditionOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryDeviceConditionOneWayWithContext(tarsCtx context.Context, deviceNameJson string, SearchKey string, SearchValue string, col *[]TarsWarpPacket, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*col))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "QueryDeviceCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryDeviceAll is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryDeviceAll(deviceNameJson string, offset int32, limit int32, col *[]TarsWarpPacket, count *int32, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(offset, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*col))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryDeviceAll", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*col) = make([]TarsWarpPacket, length)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {

			err = (*col)[i2].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 5, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 6, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryDeviceAllWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryDeviceAllWithContext(tarsCtx context.Context, deviceNameJson string, offset int32, limit int32, col *[]TarsWarpPacket, count *int32, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(offset, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*col))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryDeviceAll", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*col) = make([]TarsWarpPacket, length)
		for i3, e3 := int32(0), length; i3 < e3; i3++ {

			err = (*col)[i3].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 5, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 6, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryDeviceAllOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryDeviceAllOneWayWithContext(tarsCtx context.Context, deviceNameJson string, offset int32, limit int32, col *[]TarsWarpPacket, count *int32, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(offset, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*col))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "QueryDeviceAll", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateDevice is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) CreateDevice(deviceNameJson string, col []Column, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len(col)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "CreateDevice", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 3, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateDeviceWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) CreateDeviceWithContext(tarsCtx context.Context, deviceNameJson string, col []Column, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len(col)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "CreateDevice", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 3, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateDeviceOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) CreateDeviceOneWayWithContext(tarsCtx context.Context, deviceNameJson string, col []Column, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len(col)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "CreateDevice", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//RemoveDevice is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) RemoveDevice(deviceNameJson string, SearchKey string, SearchValue string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "RemoveDevice", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 4, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//RemoveDeviceWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) RemoveDeviceWithContext(tarsCtx context.Context, deviceNameJson string, SearchKey string, SearchValue string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "RemoveDevice", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 4, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//RemoveDeviceOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) RemoveDeviceOneWayWithContext(tarsCtx context.Context, deviceNameJson string, SearchKey string, SearchValue string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "RemoveDevice", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//EditDevice is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) EditDevice(deviceNameJson string, SearchKey string, SearchValue string, col []Column, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len(col)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "EditDevice", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//EditDeviceWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) EditDeviceWithContext(tarsCtx context.Context, deviceNameJson string, SearchKey string, SearchValue string, col []Column, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len(col)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "EditDevice", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//EditDeviceOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) EditDeviceOneWayWithContext(tarsCtx context.Context, deviceNameJson string, SearchKey string, SearchValue string, col []Column, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 3)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len(col)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "EditDevice", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//BindDeviceCompany is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) BindDeviceCompany(deviceNameJson string, companyID string, col []Column, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len(col)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "BindDeviceCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 4, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//BindDeviceCompanyWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) BindDeviceCompanyWithContext(tarsCtx context.Context, deviceNameJson string, companyID string, col []Column, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len(col)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "BindDeviceCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 4, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//BindDeviceCompanyOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) BindDeviceCompanyOneWayWithContext(tarsCtx context.Context, deviceNameJson string, companyID string, col []Column, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len(col)), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "BindDeviceCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UnbindDeviceCompany is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) UnbindDeviceCompany(deviceNameJson string, companyID string, SearchKey string, SearchValue string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "UnbindDeviceCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UnbindDeviceCompanyWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) UnbindDeviceCompanyWithContext(tarsCtx context.Context, deviceNameJson string, companyID string, SearchKey string, SearchValue string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "UnbindDeviceCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UnbindDeviceCompanyOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) UnbindDeviceCompanyOneWayWithContext(tarsCtx context.Context, deviceNameJson string, companyID string, SearchKey string, SearchValue string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "UnbindDeviceCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindDeviceWithCondition is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryBindDeviceWithCondition(deviceNameJson string, companyID string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindDeviceWithCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 3, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindDeviceWithConditionWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryBindDeviceWithConditionWithContext(tarsCtx context.Context, deviceNameJson string, companyID string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindDeviceWithCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 3, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindDeviceWithConditionOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryBindDeviceWithConditionOneWayWithContext(tarsCtx context.Context, deviceNameJson string, companyID string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "QueryBindDeviceWithCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindDeviceCondition is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryBindDeviceCondition(deviceNameJson string, companyID string, SearchKey string, SearchValue string, col *[]TarsWarpPacket, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*col))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindDeviceCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*col) = make([]TarsWarpPacket, length)
		for i4, e4 := int32(0), length; i4 < e4; i4++ {

			err = (*col)[i4].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*Result), 6, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindDeviceConditionWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryBindDeviceConditionWithContext(tarsCtx context.Context, deviceNameJson string, companyID string, SearchKey string, SearchValue string, col *[]TarsWarpPacket, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*col))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindDeviceCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*col) = make([]TarsWarpPacket, length)
		for i5, e5 := int32(0), length; i5 < e5; i5++ {

			err = (*col)[i5].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*Result), 6, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindDeviceConditionOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryBindDeviceConditionOneWayWithContext(tarsCtx context.Context, deviceNameJson string, companyID string, SearchKey string, SearchValue string, col *[]TarsWarpPacket, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchKey, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(SearchValue, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*col))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*Result), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "QueryBindDeviceCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindDevicecAll is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryBindDevicecAll(deviceNameJson string, offset int32, limit int32, companyID string, col *[]TarsWarpPacket, count *int32, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(offset, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*col))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindDevicecAll", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*col) = make([]TarsWarpPacket, length)
		for i6, e6 := int32(0), length; i6 < e6; i6++ {

			err = (*col)[i6].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 6, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 7, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindDevicecAllWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryBindDevicecAllWithContext(tarsCtx context.Context, deviceNameJson string, offset int32, limit int32, companyID string, col *[]TarsWarpPacket, count *int32, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(offset, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*col))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "QueryBindDevicecAll", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*col) = make([]TarsWarpPacket, length)
		for i7, e7 := int32(0), length; i7 < e7; i7++ {

			err = (*col)[i7].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 6, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 7, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryBindDevicecAllOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) QueryBindDevicecAllOneWayWithContext(tarsCtx context.Context, deviceNameJson string, offset int32, limit int32, companyID string, col *[]TarsWarpPacket, count *int32, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(offset, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(companyID, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*col))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *col {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "QueryBindDevicecAll", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//InitDevice is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) InitDevice(deviceNameJson string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "initDevice", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//InitDeviceWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) InitDeviceWithContext(tarsCtx context.Context, deviceNameJson string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "initDevice", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*Result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//InitDeviceOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PluginDeviceProcess) InitDeviceOneWayWithContext(tarsCtx context.Context, deviceNameJson string, Result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(deviceNameJson, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*Result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "initDevice", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetServant sets servant for the service.
func (_obj *PluginDeviceProcess) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *PluginDeviceProcess) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol sets the protocol for the servant.
func (_obj *PluginDeviceProcess) TarsSetProtocol(p m.Protocol) {
	_obj.s.TarsSetProtocol(p)
}

//AddServant adds servant  for the service.
func (_obj *PluginDeviceProcess) AddServant(imp _impPluginDeviceProcess, obj string) {
	tars.AddServant(_obj, imp, obj)
}

//AddServant adds servant  for the service with context.
func (_obj *PluginDeviceProcess) AddServantWithContext(imp _impPluginDeviceProcessWithContext, obj string) {
	tars.AddServantWithContext(_obj, imp, obj)
}

type _impPluginDeviceProcess interface {
	QueryDeviceWithCondition(deviceNameJson string, Result *int32) (ret int32, err error)
	QueryDeviceCondition(deviceNameJson string, SearchKey string, SearchValue string, col *[]TarsWarpPacket, Result *int32) (ret int32, err error)
	QueryDeviceAll(deviceNameJson string, offset int32, limit int32, col *[]TarsWarpPacket, count *int32, Result *int32) (ret int32, err error)
	CreateDevice(deviceNameJson string, col []Column, Result *int32) (ret int32, err error)
	RemoveDevice(deviceNameJson string, SearchKey string, SearchValue string, Result *int32) (ret int32, err error)
	EditDevice(deviceNameJson string, SearchKey string, SearchValue string, col []Column, Result *int32) (ret int32, err error)
	BindDeviceCompany(deviceNameJson string, companyID string, col []Column, Result *int32) (ret int32, err error)
	UnbindDeviceCompany(deviceNameJson string, companyID string, SearchKey string, SearchValue string, Result *int32) (ret int32, err error)
	QueryBindDeviceWithCondition(deviceNameJson string, companyID string, Result *int32) (ret int32, err error)
	QueryBindDeviceCondition(deviceNameJson string, companyID string, SearchKey string, SearchValue string, col *[]TarsWarpPacket, Result *int32) (ret int32, err error)
	QueryBindDevicecAll(deviceNameJson string, offset int32, limit int32, companyID string, col *[]TarsWarpPacket, count *int32, Result *int32) (ret int32, err error)
	InitDevice(deviceNameJson string, Result *int32) (ret int32, err error)
}
type _impPluginDeviceProcessWithContext interface {
	QueryDeviceWithCondition(tarsCtx context.Context, deviceNameJson string, Result *int32) (ret int32, err error)
	QueryDeviceCondition(tarsCtx context.Context, deviceNameJson string, SearchKey string, SearchValue string, col *[]TarsWarpPacket, Result *int32) (ret int32, err error)
	QueryDeviceAll(tarsCtx context.Context, deviceNameJson string, offset int32, limit int32, col *[]TarsWarpPacket, count *int32, Result *int32) (ret int32, err error)
	CreateDevice(tarsCtx context.Context, deviceNameJson string, col []Column, Result *int32) (ret int32, err error)
	RemoveDevice(tarsCtx context.Context, deviceNameJson string, SearchKey string, SearchValue string, Result *int32) (ret int32, err error)
	EditDevice(tarsCtx context.Context, deviceNameJson string, SearchKey string, SearchValue string, col []Column, Result *int32) (ret int32, err error)
	BindDeviceCompany(tarsCtx context.Context, deviceNameJson string, companyID string, col []Column, Result *int32) (ret int32, err error)
	UnbindDeviceCompany(tarsCtx context.Context, deviceNameJson string, companyID string, SearchKey string, SearchValue string, Result *int32) (ret int32, err error)
	QueryBindDeviceWithCondition(tarsCtx context.Context, deviceNameJson string, companyID string, Result *int32) (ret int32, err error)
	QueryBindDeviceCondition(tarsCtx context.Context, deviceNameJson string, companyID string, SearchKey string, SearchValue string, col *[]TarsWarpPacket, Result *int32) (ret int32, err error)
	QueryBindDevicecAll(tarsCtx context.Context, deviceNameJson string, offset int32, limit int32, companyID string, col *[]TarsWarpPacket, count *int32, Result *int32) (ret int32, err error)
	InitDevice(tarsCtx context.Context, deviceNameJson string, Result *int32) (ret int32, err error)
}

// Dispatch is used to call the server side implemnet for the method defined in the tars file. _withContext shows using context or not.
func (_obj *PluginDeviceProcess) Dispatch(tarsCtx context.Context, _val interface{}, tarsReq *requestf.RequestPacket, tarsResp *requestf.ResponsePacket, _withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(tools.Int8ToByte(tarsReq.SBuffer))
	_os := codec.NewBuffer()
	switch tarsReq.SFuncName {
	case "QueryDeviceWithCondition":
		var deviceNameJson string
		var Result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&deviceNameJson, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("deviceNameJson", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&deviceNameJson, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["deviceNameJson"])
				if err = json.Unmarshal([]byte(_jsonStr_), &deviceNameJson); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPluginDeviceProcess)
			_funRet_, err = _imp.QueryDeviceWithCondition(deviceNameJson, &Result)
		} else {
			_imp := _val.(_impPluginDeviceProcessWithContext)
			_funRet_, err = _imp.QueryDeviceWithCondition(tarsCtx, deviceNameJson, &Result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(Result, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(Result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("Result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Result"] = Result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "QueryDeviceCondition":
		var deviceNameJson string
		var SearchKey string
		var SearchValue string
		var col []TarsWarpPacket
		var Result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&deviceNameJson, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&SearchKey, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&SearchValue, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("deviceNameJson", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&deviceNameJson, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("SearchKey", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&SearchKey, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("SearchValue", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&SearchValue, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["deviceNameJson"])
				if err = json.Unmarshal([]byte(_jsonStr_), &deviceNameJson); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["SearchKey"])
				if err = json.Unmarshal([]byte(_jsonStr_), &SearchKey); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["SearchValue"])
				if err = json.Unmarshal([]byte(_jsonStr_), &SearchValue); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPluginDeviceProcess)
			_funRet_, err = _imp.QueryDeviceCondition(deviceNameJson, SearchKey, SearchValue, &col, &Result)
		} else {
			_imp := _val.(_impPluginDeviceProcessWithContext)
			_funRet_, err = _imp.QueryDeviceCondition(tarsCtx, deviceNameJson, SearchKey, SearchValue, &col, &Result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(col)), 0)
			if err != nil {
				return err
			}

			for _, v := range col {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(Result, 5)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(col)), 0)
			if err != nil {
				return err
			}

			for _, v := range col {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("col", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(Result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("Result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["col"] = col
			_rspJson_["Result"] = Result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "QueryDeviceAll":
		var deviceNameJson string
		var offset int32
		var limit int32
		var col []TarsWarpPacket
		var count int32
		var Result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&deviceNameJson, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&offset, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("deviceNameJson", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&deviceNameJson, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["deviceNameJson"])
				if err = json.Unmarshal([]byte(_jsonStr_), &deviceNameJson); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPluginDeviceProcess)
			_funRet_, err = _imp.QueryDeviceAll(deviceNameJson, offset, limit, &col, &count, &Result)
		} else {
			_imp := _val.(_impPluginDeviceProcessWithContext)
			_funRet_, err = _imp.QueryDeviceAll(tarsCtx, deviceNameJson, offset, limit, &col, &count, &Result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(col)), 0)
			if err != nil {
				return err
			}

			for _, v := range col {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 5)
			if err != nil {
				return err
			}

			err = _os.Write_int32(Result, 6)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(col)), 0)
			if err != nil {
				return err
			}

			for _, v := range col {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("col", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(Result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("Result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["col"] = col
			_rspJson_["count"] = count
			_rspJson_["Result"] = Result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "CreateDevice":
		var deviceNameJson string
		var col []Column
		var Result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&deviceNameJson, 1, true)
			if err != nil {
				return err
			}

			err, have, ty = _is.SkipToNoCheck(2, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}

				col = make([]Column, length)
				for i8, e8 := int32(0), length; i8 < e8; i8++ {

					err = col[i8].ReadBlock(_is, 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SIMPLE_LIST {
				err = fmt.Errorf("not support simple_list type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("deviceNameJson", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&deviceNameJson, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("col", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err, have, ty = _is.SkipToNoCheck(0, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}

				col = make([]Column, length)
				for i9, e9 := int32(0), length; i9 < e9; i9++ {

					err = col[i9].ReadBlock(_is, 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SIMPLE_LIST {
				err = fmt.Errorf("not support simple_list type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["deviceNameJson"])
				if err = json.Unmarshal([]byte(_jsonStr_), &deviceNameJson); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["col"])
				if err = json.Unmarshal([]byte(_jsonStr_), &col); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPluginDeviceProcess)
			_funRet_, err = _imp.CreateDevice(deviceNameJson, col, &Result)
		} else {
			_imp := _val.(_impPluginDeviceProcessWithContext)
			_funRet_, err = _imp.CreateDevice(tarsCtx, deviceNameJson, col, &Result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(Result, 3)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(Result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("Result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Result"] = Result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "RemoveDevice":
		var deviceNameJson string
		var SearchKey string
		var SearchValue string
		var Result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&deviceNameJson, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&SearchKey, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&SearchValue, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("deviceNameJson", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&deviceNameJson, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("SearchKey", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&SearchKey, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("SearchValue", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&SearchValue, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["deviceNameJson"])
				if err = json.Unmarshal([]byte(_jsonStr_), &deviceNameJson); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["SearchKey"])
				if err = json.Unmarshal([]byte(_jsonStr_), &SearchKey); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["SearchValue"])
				if err = json.Unmarshal([]byte(_jsonStr_), &SearchValue); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPluginDeviceProcess)
			_funRet_, err = _imp.RemoveDevice(deviceNameJson, SearchKey, SearchValue, &Result)
		} else {
			_imp := _val.(_impPluginDeviceProcessWithContext)
			_funRet_, err = _imp.RemoveDevice(tarsCtx, deviceNameJson, SearchKey, SearchValue, &Result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(Result, 4)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(Result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("Result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Result"] = Result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "EditDevice":
		var deviceNameJson string
		var SearchKey string
		var SearchValue string
		var col []Column
		var Result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&deviceNameJson, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&SearchKey, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&SearchValue, 3, true)
			if err != nil {
				return err
			}

			err, have, ty = _is.SkipToNoCheck(4, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}

				col = make([]Column, length)
				for i10, e10 := int32(0), length; i10 < e10; i10++ {

					err = col[i10].ReadBlock(_is, 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SIMPLE_LIST {
				err = fmt.Errorf("not support simple_list type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("deviceNameJson", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&deviceNameJson, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("SearchKey", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&SearchKey, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("SearchValue", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&SearchValue, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("col", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err, have, ty = _is.SkipToNoCheck(0, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}

				col = make([]Column, length)
				for i11, e11 := int32(0), length; i11 < e11; i11++ {

					err = col[i11].ReadBlock(_is, 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SIMPLE_LIST {
				err = fmt.Errorf("not support simple_list type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["deviceNameJson"])
				if err = json.Unmarshal([]byte(_jsonStr_), &deviceNameJson); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["SearchKey"])
				if err = json.Unmarshal([]byte(_jsonStr_), &SearchKey); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["SearchValue"])
				if err = json.Unmarshal([]byte(_jsonStr_), &SearchValue); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["col"])
				if err = json.Unmarshal([]byte(_jsonStr_), &col); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPluginDeviceProcess)
			_funRet_, err = _imp.EditDevice(deviceNameJson, SearchKey, SearchValue, col, &Result)
		} else {
			_imp := _val.(_impPluginDeviceProcessWithContext)
			_funRet_, err = _imp.EditDevice(tarsCtx, deviceNameJson, SearchKey, SearchValue, col, &Result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(Result, 5)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(Result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("Result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Result"] = Result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "BindDeviceCompany":
		var deviceNameJson string
		var companyID string
		var col []Column
		var Result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&deviceNameJson, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&companyID, 2, true)
			if err != nil {
				return err
			}

			err, have, ty = _is.SkipToNoCheck(3, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}

				col = make([]Column, length)
				for i12, e12 := int32(0), length; i12 < e12; i12++ {

					err = col[i12].ReadBlock(_is, 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SIMPLE_LIST {
				err = fmt.Errorf("not support simple_list type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("deviceNameJson", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&deviceNameJson, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("companyID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&companyID, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("col", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err, have, ty = _is.SkipToNoCheck(0, true)
			if err != nil {
				return err
			}

			if ty == codec.LIST {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}

				col = make([]Column, length)
				for i13, e13 := int32(0), length; i13 < e13; i13++ {

					err = col[i13].ReadBlock(_is, 0, false)
					if err != nil {
						return err
					}

				}
			} else if ty == codec.SIMPLE_LIST {
				err = fmt.Errorf("not support simple_list type")
				if err != nil {
					return err
				}

			} else {
				err = fmt.Errorf("require vector, but not")
				if err != nil {
					return err
				}

			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["deviceNameJson"])
				if err = json.Unmarshal([]byte(_jsonStr_), &deviceNameJson); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["companyID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &companyID); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["col"])
				if err = json.Unmarshal([]byte(_jsonStr_), &col); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPluginDeviceProcess)
			_funRet_, err = _imp.BindDeviceCompany(deviceNameJson, companyID, col, &Result)
		} else {
			_imp := _val.(_impPluginDeviceProcessWithContext)
			_funRet_, err = _imp.BindDeviceCompany(tarsCtx, deviceNameJson, companyID, col, &Result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(Result, 4)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(Result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("Result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Result"] = Result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "UnbindDeviceCompany":
		var deviceNameJson string
		var companyID string
		var SearchKey string
		var SearchValue string
		var Result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&deviceNameJson, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&companyID, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&SearchKey, 3, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&SearchValue, 4, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("deviceNameJson", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&deviceNameJson, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("companyID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&companyID, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("SearchKey", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&SearchKey, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("SearchValue", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&SearchValue, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["deviceNameJson"])
				if err = json.Unmarshal([]byte(_jsonStr_), &deviceNameJson); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["companyID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &companyID); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["SearchKey"])
				if err = json.Unmarshal([]byte(_jsonStr_), &SearchKey); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["SearchValue"])
				if err = json.Unmarshal([]byte(_jsonStr_), &SearchValue); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPluginDeviceProcess)
			_funRet_, err = _imp.UnbindDeviceCompany(deviceNameJson, companyID, SearchKey, SearchValue, &Result)
		} else {
			_imp := _val.(_impPluginDeviceProcessWithContext)
			_funRet_, err = _imp.UnbindDeviceCompany(tarsCtx, deviceNameJson, companyID, SearchKey, SearchValue, &Result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(Result, 5)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(Result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("Result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Result"] = Result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "QueryBindDeviceWithCondition":
		var deviceNameJson string
		var companyID string
		var Result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&deviceNameJson, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&companyID, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("deviceNameJson", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&deviceNameJson, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("companyID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&companyID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["deviceNameJson"])
				if err = json.Unmarshal([]byte(_jsonStr_), &deviceNameJson); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["companyID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &companyID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPluginDeviceProcess)
			_funRet_, err = _imp.QueryBindDeviceWithCondition(deviceNameJson, companyID, &Result)
		} else {
			_imp := _val.(_impPluginDeviceProcessWithContext)
			_funRet_, err = _imp.QueryBindDeviceWithCondition(tarsCtx, deviceNameJson, companyID, &Result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(Result, 3)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(Result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("Result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Result"] = Result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "QueryBindDeviceCondition":
		var deviceNameJson string
		var companyID string
		var SearchKey string
		var SearchValue string
		var col []TarsWarpPacket
		var Result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&deviceNameJson, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&companyID, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&SearchKey, 3, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&SearchValue, 4, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("deviceNameJson", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&deviceNameJson, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("companyID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&companyID, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("SearchKey", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&SearchKey, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("SearchValue", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&SearchValue, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["deviceNameJson"])
				if err = json.Unmarshal([]byte(_jsonStr_), &deviceNameJson); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["companyID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &companyID); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["SearchKey"])
				if err = json.Unmarshal([]byte(_jsonStr_), &SearchKey); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["SearchValue"])
				if err = json.Unmarshal([]byte(_jsonStr_), &SearchValue); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPluginDeviceProcess)
			_funRet_, err = _imp.QueryBindDeviceCondition(deviceNameJson, companyID, SearchKey, SearchValue, &col, &Result)
		} else {
			_imp := _val.(_impPluginDeviceProcessWithContext)
			_funRet_, err = _imp.QueryBindDeviceCondition(tarsCtx, deviceNameJson, companyID, SearchKey, SearchValue, &col, &Result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 5)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(col)), 0)
			if err != nil {
				return err
			}

			for _, v := range col {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(Result, 6)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(col)), 0)
			if err != nil {
				return err
			}

			for _, v := range col {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("col", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(Result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("Result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["col"] = col
			_rspJson_["Result"] = Result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "QueryBindDevicecAll":
		var deviceNameJson string
		var offset int32
		var limit int32
		var companyID string
		var col []TarsWarpPacket
		var count int32
		var Result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&deviceNameJson, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&offset, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 3, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&companyID, 4, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("deviceNameJson", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&deviceNameJson, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("companyID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&companyID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["deviceNameJson"])
				if err = json.Unmarshal([]byte(_jsonStr_), &deviceNameJson); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["companyID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &companyID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPluginDeviceProcess)
			_funRet_, err = _imp.QueryBindDevicecAll(deviceNameJson, offset, limit, companyID, &col, &count, &Result)
		} else {
			_imp := _val.(_impPluginDeviceProcessWithContext)
			_funRet_, err = _imp.QueryBindDevicecAll(tarsCtx, deviceNameJson, offset, limit, companyID, &col, &count, &Result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 5)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(col)), 0)
			if err != nil {
				return err
			}

			for _, v := range col {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 6)
			if err != nil {
				return err
			}

			err = _os.Write_int32(Result, 7)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(col)), 0)
			if err != nil {
				return err
			}

			for _, v := range col {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("col", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(Result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("Result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["col"] = col
			_rspJson_["count"] = count
			_rspJson_["Result"] = Result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "initDevice":
		var deviceNameJson string
		var Result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&deviceNameJson, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("deviceNameJson", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&deviceNameJson, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["deviceNameJson"])
				if err = json.Unmarshal([]byte(_jsonStr_), &deviceNameJson); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPluginDeviceProcess)
			_funRet_, err = _imp.InitDevice(deviceNameJson, &Result)
		} else {
			_imp := _val.(_impPluginDeviceProcessWithContext)
			_funRet_, err = _imp.InitDevice(tarsCtx, deviceNameJson, &Result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(Result, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(Result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("Result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Result"] = Result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(tarsCtx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(tarsCtx)
	if ok && c != nil {
		_context = c
	}
	*tarsResp = requestf.ResponsePacket{
		IVersion:     tarsReq.IVersion,
		CPacketType:  0,
		IRequestId:   tarsReq.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}

	_ = _is
	_ = _os
	_ = length
	_ = have
	_ = ty
	return nil
}
