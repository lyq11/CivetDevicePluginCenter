// Package CivetDevicePluginCenter comment
// This file was generated by tars2go 1.1.4
// Generated from PluginDeviceProcess.tars
package CivetDevicePluginCenter

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// TarsWarpPacket struct implement
type TarsWarpPacket struct {
	Base map[string]string `json:"Base"`
	Key  []string          `json:"Key"`
}

func (st *TarsWarpPacket) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *TarsWarpPacket) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err, have = _is.SkipTo(codec.MAP, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&length, 0, true)
	if err != nil {
		return err
	}

	st.Base = make(map[string]string)
	for i0, e0 := int32(0), length; i0 < e0; i0++ {
		var k0 string
		var v0 string

		err = _is.Read_string(&k0, 0, false)
		if err != nil {
			return err
		}

		err = _is.Read_string(&v0, 1, false)
		if err != nil {
			return err
		}

		st.Base[k0] = v0
	}

	err, have, ty = _is.SkipToNoCheck(1, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Key = make([]string, length)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {

			err = _is.Read_string(&st.Key[i1], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *TarsWarpPacket) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require TarsWarpPacket, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *TarsWarpPacket) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.WriteHead(codec.MAP, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Base)), 0)
	if err != nil {
		return err
	}

	for k2, v2 := range st.Base {

		err = _os.Write_string(k2, 0)
		if err != nil {
			return err
		}

		err = _os.Write_string(v2, 1)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Key)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Key {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *TarsWarpPacket) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// Column struct implement
type Column struct {
	Key   string `json:"Key"`
	Value string `json:"Value"`
}

func (st *Column) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *Column) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Key, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Value, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *Column) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Column, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *Column) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Key, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Value, 1)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *Column) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
